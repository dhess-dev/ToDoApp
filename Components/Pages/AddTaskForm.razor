@page "/add-task-form"
@using ToDoApp.Components.Models

<MudPaper Class="p-4" Elevation="4">
    <MudText Typo="Typo.h6">Add New Task</MudText>
    <MudTextField @bind-Value="_newTask.Title" Label="Title" Variant="Variant.Outlined" Required="true"/>
    <MudTextField @bind-Value="_newTask.Description" Label="Description" Variant="Variant.Outlined" Lines="3"/>
    <MudDatePicker @bind-Date="_newTask.DueDate" Label="Due Date"/>

    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="AddTask" Class="mt-2">
        Add Task
    </MudButton>
</MudPaper>

<MudList T="TaskItem" Class="mt-4">
    @foreach (var task in _tasks)
    {
        <MudListItem T="TaskItem">
            <MudCheckBox T="bool" bind-Value="@task.IsCompleted"/>
            <MudText Typo="Typo.subtitle1">
                @task.Title
            </MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteTask(task)"/>
        </MudListItem>
    }
</MudList>



@code {
    TaskItem _newTask = new();

    readonly List<TaskItem> _tasks =
    [
        new TaskItem { Title = "Task 1", Description = "Description 1", DueDate = DateTime.Now.AddDays(1) },
        new TaskItem { Title = "Task 2", Description = "Description 2", DueDate = DateTime.Now.AddDays(2) },
        new TaskItem { Title = "Task 3", Description = "Description 3", DueDate = DateTime.Now.AddDays(3) }
    ];

    private Task AddTask(MouseEventArgs arg)
    {
        _tasks.Add(_newTask);
        _newTask = new TaskItem();
        return Task.CompletedTask;
    }

    private Task DeleteTask(TaskItem task)
    {
        _tasks.Remove(task);
        return Task.CompletedTask;
    }

}